@DSL Implicit;
@Behaviour DruckerPragerHyperboloidal;
@Date 08 / 11 / 2024;
@Algorithm NewtonRaphson_NumericalJacobian;
@PerturbationValueForNumericalJacobianComputation 1e-12;
@ModellingHypotheses{".+"};
@Description{
  Derived a Drucker Prager with parabolodial form with normal plastic flow
  Yield surface defined by:

  Compared to cone implemention, this paraboloid fit overestimates the yield surface
  Definition of M_JP in triaxial compression:
  "\["
  "  M_{JP} = \frac{2 \sqrt{3} \sin(\phi')}{3 - \sin(\phi')}"
  "\]"
  Definition of M_JP in triaxial extension:
  "\["
  "  M_{JP} = \frac{2 \sqrt{3} \sin(\phi')}{3 + \sin(\phi')}"
  "\]"
}

@Epsilon 1.e-10;
@Theta 1.;

@Brick StandardElasticity;
@MaterialProperty real phi;
phi.setEntryName("phi");
@MaterialProperty real c;
c.setEntryName("c");
@MaterialProperty real a;
a.setEntryName("proximity");

@LocalVariable real lambda;
@LocalVariable real mu;
@LocalVariable bool bpl;
@LocalVariable real MJP;

@StateVariable strain p;
p.setGlossaryName("EquivalentPlasticStrain");
@AuxiliaryStateVariable StrainStensor epl;
epl.setGlossaryName("PlasticStrain");


@InitLocalVariables {
  lambda = computeLambda(young, nu);
  mu = computeMu(young, nu);
  MJP = 2 * sqrt(3) * sin(phi) / (3 - sin(phi));
}

@Predictor{
  const auto sigel = computeElasticPrediction();
  const auto pel = trace(sigel) / 3;
  const auto qel = sigmaeq(sigel);
  bpl = (- MJP * pel - MJP * c / tan(phi) + sqrt(a*power<2>(MJP) + power<2>(qel/sqrt(3))) > 0);
}

@Integrator {
  const auto id = Stensor::Id();
  // const auto seps =  real(1.e-12) * young;
  if (bpl) {
    const auto pr = trace(sig) / 3;
    const auto q = sigmaeq(sig);
    // nq is the derivative of the equivalent von Mises stress
    // const auto iq = 1 / max(q, seps);
    // const auto nq = eval(3 * deviator(sig) * (iq / 2));
    // const auto a = -3 * MJP;
    // const auto a = -3 * MJP;
    // const auto b = - 6 * power<2>(MJP) * c / tan(phi);
    // const auto df_dsig   = eval((- (2 * a * pr + b)/3) * id + 3* deviator(sig));
    const auto df_dsig   = eval((-MJP/3) * id + deviator(sig)/(2*sqrt(a*power<2>(MJP)+power<2>(q)/3)));
    // const auto df_dsig   = eval((- MJP/3) * id + (nq /sqrt(3)));
    feel += dp * df_dsig; 
    fp =  (- MJP * pr - MJP * c / tan(phi) + sqrt(a*power<2>(MJP) + power<2>(q/sqrt(3))))/young;
    // fp =  (- MJP * pr + q / sqrt(3) - MJP * c / tan(phi))/young;
  }
} // end of @Integrator

@UpdateAuxiliaryStateVariables
{
  epl += deto-deel;
}
