// Define the behaviour name and metadata
@DSL Implicit;
@Behaviour ModCamClay_explicit;
@Author Your Name;
@Date 01/09/2024;
@Description{
    Explicit implementation of the Modified Cam Clay model in MFront.
    This is a simple explicit approach, suitable for small time steps.
}

// Material parameters
@MaterialProperty real nu;
@PhysicalBounds nu in [-1:0.5];
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real M;
@PhysicalBounds M in [0:*[;
M.setEntryName("CriticalStateLineSlope");

@MaterialProperty real ka;
@PhysicalBounds ka in [0:*[;
ka.setEntryName("SwellingLineSlope");

@MaterialProperty real la;
@PhysicalBounds la in [0:*[;
la.setEntryName("VirginConsolidationLineSlope");

@MaterialProperty stress pc_char;
pc_char.setEntryName("CharacteristicPreConsolidationPressure");
@PhysicalBounds pc_char in [0:*[;

@MaterialProperty real v0;
@PhysicalBounds v0 in [1:*[;
v0.setEntryName("InitialVolumeRatio");

// State variables
@StateVariable real lp;   // Equivalent plastic strain
lp.setGlossaryName("EquivalentPlasticStrain");

@IntegrationVariable strain rpc;  // Reduced pre-consolidation pressure
rpc.setEntryName("ReducedPreConsolidationPressure");

@AuxiliaryStateVariable stress pc;  // Pre-consolidation pressure
pc.setEntryName("PreConsolidationPressure");

@AuxiliaryStateVariable real epl_V;  // Plastic volumetric strain
epl_V.setEntryName("PlasticVolumetricStrain");

@AuxiliaryStateVariable real v;  // Volume ratio
@PhysicalBounds v in [1:*[;
v.setEntryName("VolumeRatio");

// Local variables
@LocalVariable StressStensor sig_trial;  // Trial stress tensor
@LocalVariable real M2;  // Square of M
@LocalVariable real young;  // Young's modulus
@LocalVariable real K;  // Bulk modulus
@LocalVariable real G;  // Shear modulus
@LocalVariable real lame;  // First lame parameter
@LocalVariable bool yielded;  // Flag to indicate yielding


@Includes{
#include <iostream>
#include <fstream>
}



@InitLocalVariables
{
    tfel::raise_if(la < ka, "Invalid parameters: la<ka");
    M2 = M * M;

    // Compute the elastic stiffness based on initial conditions
    const auto p = -trace(sig) / 3;
    K = v0 / ka * p;
    young = 3.0 * K * (1.0 - 2 * nu);
    G = young / (2 * (1 + nu));
    lame = young * nu / ((1 + nu) * (1 - 2 * nu));
    yielded = false;
}

@Predictor
{
    // Trace of the strain increment (volumetric strain)
    const auto trace_eps = trace(deto);

    // Trial stress tensor computation
    sig_trial = lame * trace_eps * Stensor::Id() + 2 * G * deviator(deto);

    // Deviatoric and mean stress
    const auto s_trial = deviator(sig_trial);
    const auto q_trial = std::sqrt(1.5 * s_trial | s_trial);
    const auto p_trial = -trace(sig_trial) / 3;

    // Yield function
    const auto f_trial = q_trial * q_trial + M2 * p_trial * (p_trial - pc);

    yielded = f_trial > 0;  // Check if the material has yielded
}

@Integrator
{
    constexpr const auto id = Stensor::Id();
    // constexpr const auto M = Stensor4::M();
    // constexpr const auto M = M;

    if (yielded) {
        // Plastic correction for the yielded case
        const auto q_trial = sigmaeq(sig_trial);
        const auto p_trial = -trace(sig_trial) / 3;

        std::ofstream logFile;
        logFile.open("/mofem_install/jupyter/thomas/mfront_interface/log.txt");
        if (logFile.is_open()) {
            logFile << "The q_trial is: " << q_trial << std::endl;
            logFile << "The M is: " << M << std::endl;
            logFile << "The p_trial is: " << p_trial << std::endl;
            logFile << "The G is: " << G << std::endl;
            logFile.close();
        } else {
            return 1;
        }
        return 0;
        // Compute the plastic multiplier increment
        const auto dlp = (q_trial - M * p_trial) / (3 * G);

        // Update stress explicitly
        sig = sig_trial - dlp * M * p_trial;

        // Update pre-consolidation pressure
        pc += dlp * M * p_trial;

        // Update plastic volumetric strain
        epl_V += dlp * trace(deto);

        // Update volume ratio
        v = v0 + epl_V;

        // Update residuals and Jacobians for plasticity
        const auto n = eval(deviator(sig_trial) / (3 * G) + (M / 3) * id);
        feel += dlp * n;
        fp(0) = (q_trial + M * p_trial - pc) / young;

        // Compute the Jacobian matrix
        const auto dn = M * (Stensor4::IxI() - (n ^ n));
        dfeel_ddeel += 2 * G * dn;
        dfeel_ddp(0) = n;
        dfp_ddeel(0) = n / young;
        dfp_ddp(0, 0) = 0;
    } else {
        // Elastic case: no plastic correction needed
        sig = sig_trial;
    }
}
