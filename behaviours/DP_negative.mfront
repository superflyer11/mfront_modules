@DSL Implicit;
@Behaviour DruckerPragerSimple;
@Date 15 / 10 / 2024;
@Description{
  Simple Drucker Prager with normal plastic flow
  Yield surface defined by:
  "\["
  "  f(p, q) = M_JP * p + J - \frac{M_JP * c'}{\tan(\phi)}"
  "\]"
  Compared to gallery implementation,
  a more elaborate form based on material properties.
  the von Mises norm q is corrected back to a textbook sqrtJ2 for convenience
  Definition of M_JP in triaxial compression:
  "\["
  "  M_{JP} = \frac{2 \sqrt{3} \sin(\phi')}{3 - \sin(\phi')}"
  "\]"
  Definition of M_JP in triaxial extension:
  "\["
  "  M_{JP} = \frac{2 \sqrt{3} \sin(\phi')}{3 + \sin(\phi')}"
  "\]"
}

@Algorithm NewtonRaphson_NumericalJacobian;
@Brick StandardElasticity;
@Theta 1.0;
@Epsilon 1e-16;
@MaximumNumberOfIterations 20;
@PerturbationValueForNumericalJacobianComputation 1.e-8;
@ModellingHypotheses{".+"};

// phi is the internal friction angle
@MaterialProperty real phi;
phi.setEntryName("phi");
// c is effective cohesion
@MaterialProperty stress c;
c.setEntryName("c");

@StateVariable strain p;
p.setGlossaryName("EquivalentPlasticStrain");
@AuxiliaryStateVariable StrainStensor epl;
epl.setGlossaryName("PlasticStrain");

@LocalVariable bool bpl;
@LocalVariable real MJP;
@LocalVariable real K;

@InitLocalVariables {
  MJP = 2 * sqrt(3) * sin(phi) / (3 - sin(phi));
  K = MJP * c / tan(phi);
}

@Predictor{
  const auto sigel = computeElasticPrediction();
  const auto pel = trace(sigel) / 3;
  const auto sel = deviator(sigel);
  const auto Jel = sqrt((sel | sel) / 2);
  const auto f = MJP * pel + Jel - K;
  bpl = f > stress{0};
}

@Integrator {
  const auto id = Stensor::Id();
  if (!bpl) {
    return true;
  }
  const auto pr = trace(sig) / 3;
  const auto qr = sigmaeq(sig);
  const auto sr = deviator(sig);
  const auto Jr = sqrt((sr | sr) / 2);
  const auto fr = MJP * pr + Jr - K;
  const auto seps = strain(1.e-12) * young;
  const auto nJ = sqrt(3) * sr / (2 * max(qr, seps));

  const auto df_dsig   = (MJP/3) * id + nJ;
  feel += dp * df_dsig; 
  fp =  fr / young;
}

@UpdateAuxiliaryStateVariables
{
  epl += deto-deel;
}
